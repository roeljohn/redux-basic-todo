{"version":3,"sources":["serviceWorker.js","actions/index.js","reducers/index.js","components/CompleteTodo.js","components/Todo.js","components/Todos.js","components/UpcomingTodos.js","components/AddTodo.js","components/CompletedTodos.js","App.js","api/index.js","index.js"],"names":["Boolean","window","location","hostname","match","nextTodoId","addTodo","title","type","id","toggleTodo","VisibilityFilters","combineReducers","todos","state","action","completed","map","todo","commentId","filter","visibilityFilter","CompleteTodo","onClick","className","aria-label","checked","Todo","href","src","alt","Todos","toogleTodo","index","key","UpcomingTodos","dispatch","useDispatch","useSelector","onToggle","useCallback","todoUpcoming","t","AddTodo","input","onSubmit","e","preventDefault","value","trim","placeholder","ref","node","CompletedTodos","todoComplete","App","this","props","TodoList","completeTodo","Component","connect","error","fetch","then","response","json","catch","err","msg","store","createStore","rootReducer","applyMiddleware","thunk","console","log","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75711193.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let nextTodoId = 0;\r\nexport const addTodo = title => ({\r\n  type: \"ADD_TODO\",\r\n  id: nextTodoId++,\r\n  title\r\n});\r\n\r\nexport const completeTodo = id => ({\r\n  type: \"COMPLETE_TODO\",\r\n  id\r\n});\r\n\r\nexport const setVisibilityFilter = filter => ({\r\n  type: \"SET_VISIBILITY_FILTER\",\r\n  filter\r\n});\r\n\r\nexport const toggleTodo = id => ({\r\n  type: \"TOGGLE_TODO\",\r\n  id\r\n});\r\n\r\nexport const VisibilityFilters = {\r\n  SHOW_ALL: \"SHOW_ALL\",\r\n  SHOW_COMPLETED: \"SHOW_COMPLETED\",\r\n  SHOW_ACTIVE: \"SHOW_ACTIVE\"\r\n};\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport { VisibilityFilters } from \"../actions\";\r\nconst intialState = {\r\n  num: 0,\r\n  todos: [],\r\n  error: \"\",\r\n  id: \"\",\r\n  text: \"\",\r\n  completed: false\r\n}\r\n\r\nconst todos = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"ADD_TODO\":\r\n      return [\r\n        {\r\n          id: action.id,\r\n          title: action.title,\r\n          completed: false\r\n        },\r\n        ...state\r\n      ];\r\n    case \"TOGGLE_TODO\":\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n    case \"COMPLETE_TODO\":\r\n        const commentId = action.id;\r\n        return state.filter(todo => todo.id !== commentId);\r\n    case \"FetchData\":\r\n        return action.todos;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst todo = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"FetchTodoById\":\r\n        return action.todo;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\r\n  switch (action.type) {\r\n    case \"SET_VISIBILITY_FILTER\":\r\n      return action.filter;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default combineReducers({\r\n  todos,\r\n  todo,\r\n  visibilityFilter\r\n});","import React from \"react\";\r\n\r\nconst CompleteTodo = ({ onClick, completed }) => {\r\n    return (\r\n        <div className=\"checkbox checkbox-custom checkbox-single float-right\">\r\n            <input type=\"checkbox\" aria-label=\"Single checkbox Two\" onClick={onClick} checked={completed ? true : false} />\r\n            <label></label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CompleteTodo;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CompleteTodo from './CompleteTodo'\r\n\r\nconst Todo = ({ onClick, completed, title }) => (\r\n    <li className={`task-info ui-sortable-handle ${completed ? \"line-through\" : \"none\"}`} id=\"task17\">\r\n        <CompleteTodo completed={completed ? true : false} onClick={onClick} />\r\n        {title}\r\n        <div className=\"clearfix\"></div>\r\n        <div className=\"mt-3\">\r\n            <p className=\"float-right mb-0 mt-2\">\r\n                <button type=\"button\" className=\"btn btn-success btn-sm waves-effect waves-light\">View</button>\r\n            </p>\r\n            <p className=\"mb-0\">\r\n                <a href=\"\" className=\"text-muted\"><img src=\"https://bootdey.com/img/Content/avatar/avatar4.png\" alt=\"task-user\" className=\"thumb-sm rounded-circle mr-2\" /> <span className=\"font-bold font-secondary\">Maya Didas</span></a>\r\n            </p>\r\n        </div>\r\n    </li>\r\n);\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Todo from \"./Todo\";\r\n\r\nconst Todos = ({ todos, toogleTodo }) => (\r\n  <span>\r\n    {todos.map((todo, index) => (\r\n        <Todo key={index} {...todo} onClick={() => toogleTodo(todo.id)} />\r\n    ))}\r\n  </span>\r\n);\r\n\r\nexport default Todos;\r\n","import React, { useCallback } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { toggleTodo } from \"../actions\";\r\nimport Todos from \"./Todos\";\r\n\r\nexport default function UpcomingTodos() {\r\n  const dispatch = useDispatch();\r\n  const { todos } = useSelector(state => {\r\n    return {\r\n      todos: state.todos\r\n    };\r\n  });\r\n  const onToggle = useCallback(id => dispatch(toggleTodo(id)), [dispatch]);\r\n  const todoUpcoming = todos.filter(t => !t.completed)\r\n  return <Todos todos={todoUpcoming} toogleTodo={onToggle} />;\r\n}","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTodo } from \"../actions\";\r\n\r\nexport default function AddTodo() {\r\n  let input;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <span className=\"col-md-12\">\r\n      <form\r\n        className=\"form-inline\"\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          if (!input.value.trim()) {\r\n            return;\r\n          }\r\n          dispatch(addTodo(input.value));\r\n          input.value = \"\";\r\n        }}\r\n      >\r\n        <input className=\"mb-3 form-control col-md-12\" placeholder=\"Todo Title\" ref={node => (input = node)} />\r\n        <span className=\"w-100\">\r\n          <button className=\"btn btn-primary mb-3 float-right\" type=\"submit\">Add Todo</button>\r\n        </span>\r\n      </form>\r\n    </span>\r\n  );\r\n}","import React, { useCallback } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { toggleTodo } from \"../actions\";\r\nimport Todos from \"./Todos\";\r\n\r\nexport default function CompletedTodos() {\r\n  const dispatch = useDispatch();\r\n  const { todos } = useSelector(state => {\r\n    return {\r\n      todos: state.todos\r\n    };\r\n  });\r\n  const onToggle = useCallback(id => dispatch(toggleTodo(id)), [dispatch]);\r\n  const todoComplete = todos.filter(t => t.completed)\r\n  return <Todos todos={todoComplete} toogleTodo={onToggle} />;\r\n}","import React, { Component, useCallback } from 'react';\nimport UpcomingTodos from './components/UpcomingTodos'\nimport AddTodo from './components/AddTodo'\nimport { connect, useDispatch } from 'react-redux'\nimport { fetchAllTodos, fetchTodoById } from './api'\nimport CompleteTodos from './components/CompletedTodos';\nimport { completeTodo } from \"./actions\";\n\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.TodoList()\n        this.props.Todo()\n      }\n    onToggle(){\n        const dispatch = useDispatch();\n        useCallback(id => dispatch(completeTodo(id)), [dispatch]);\n    }\n      render() {\n\n        return (\n<div className=\"content\">\n    <div className=\"container\">\n        <div className=\"row\">\n            <AddTodo />\n            <div className=\"col-lg-6\">\n                <div className=\"card-box\">\n                    <h4 className=\"text-dark header-title\">Upcoming</h4>\n                    <p className=\"text-muted m-b-30 font-13\">Your awesome text goes here. Your awesome text goes here.</p>\n                    <ul className=\"sortable-list taskList list-unstyled ui-sortable\" id=\"upcoming\">\n                        <UpcomingTodos completeTodo={() => this.onToggle()} />\n                    </ul>\n                </div>\n            </div>\n            <div className=\"col-lg-6\">\n                <div className=\"card-box\">\n                    <h4 className=\"text-dark header-title\">Completed</h4>\n                    <p className=\"text-muted m-b-30 font-13\">Your awesome text goes here. Your awesome text goes here.</p>\n                    <ul className=\"sortable-list taskList list-unstyled ui-sortable\" id=\"completed\">\n                        <CompleteTodos completeTodo={() => this.onToggle()} />\n                    </ul>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n  );\n    }\n}\nconst mapStatetoProps = (state) => {\n    return { todos: state.todos, todo: state.todo, error: state.error }\n  }\n  \n  const mapDispatchprops = (dispatch) => {\n    return { \n        TodoList: () => dispatch(fetchAllTodos()),\n        Todo: () =>  dispatch(fetchTodoById('2'))\n    }\n  }\n  \n  \n  export default connect(mapStatetoProps, mapDispatchprops)(App);","// Fetch All Todo\r\nexport const fetchAllTodos = () => {\r\n    return (dispatch) => {\r\n        return fetch('https://jsonplaceholder.typicode.com/todos')\r\n            .then(response => response.json())\r\n            .then(json => dispatch(\r\n                { type: \"FetchData\", todos: json }\r\n                ))\r\n            .catch(err => dispatch(\r\n                { type: \"ERROR\",msg: \"Unable to fetch data\" }))\r\n    }\r\n  }\r\n\r\n  // Fetch Todo By ID\r\n  export const fetchTodoById = (id) => {\r\n    return (dispatch) => {\r\n        return fetch(`https://jsonplaceholder.typicode.com/todos/${id}`)\r\n            .then(response => response.json())\r\n            .then(json => dispatch(\r\n                { type: \"FetchTodoById\", todo: json }\r\n                ))\r\n            .catch(err => dispatch(\r\n                { type: \"ERROR\",msg: \"Unable to fetch data\" }))\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from \"./reducers\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from './App';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nconsole.log(store)\nReactDOM.render(<Provider store={store}>\n\t\t<Router basename={process.env.PUBLIC_URL}><App /></Router>\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}